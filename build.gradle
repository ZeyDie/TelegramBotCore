plugins {
    id 'java'
}

allprojects {
    repositories {
        mavenCentral()

        flatDir {
            dirs '../../libs'
        }
    }
}

def librariesFolder = "libraries";
def librariesPath = "$rootProject.buildDir/libs/$librariesFolder"

jar {
    from {
        subprojects.collect { project ->
            project.sourceSets.main.output
        }
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes (
                "Class-Path": file(librariesPath).listFiles().collect { "$librariesFolder/" + it.getName() }.join(' '),
                "Main-Class": "com.zeydie.telegrambot.core.TelegramBotCore"
        )
    }
}

subprojects {
    apply plugin: 'java'

    group = 'com.zeydie'
    version = '8.1-0.4.0A'

    dependencies {
        // https://mvnrepository.com/artifact/com.github.pengrad/java-telegram-bot-api
        implementation group: 'com.github.pengrad', name: 'java-telegram-bot-api', version: '8.1.+'

        // https://github.com/ZeyDie/Simple-GSON
        implementation group: 'com.zeydie', name: 'SGson', version: '2.11.x-1.+'

        // https://mvnrepository.com/artifact/org.atteo.classindex/classindex
        implementation group: 'org.atteo.classindex', name: 'classindex', version: '3.13'
        annotationProcessor group: 'org.atteo.classindex', name: 'classindex', version: '3.13'

        // https://mvnrepository.com/artifact/com.google.guava/guava
        implementation group: 'com.google.guava', name: 'guava', version: '33.1.+'

        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.24.+'
        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.+'

        // https://mvnrepository.com/artifact/org.jetbrains/annotations
        implementation group: 'org.jetbrains', name: 'annotations', version: '26.0.+'

        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'

        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.+'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.+'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.+'

        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        testImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.+'
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += "--enable-preview"
    }

    tasks.withType(Test).configureEach {
        jvmArgs += "--enable-preview"
    }

    tasks.withType(JavaExec).configureEach {
        jvmArgs += "--enable-preview"
    }

    jar {
        configurations.runtimeClasspath.collect {
            def path = it.getAbsolutePath();

            copy {
                from path
                into "$librariesPath"
            }
        }
    }

    test {
        useJUnitPlatform()
        jvmArgs(['--enable-preview'])
    }
}